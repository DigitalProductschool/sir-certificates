// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt  
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  verifyCode    String    @db.Uuid
  isAdmin       Boolean   @default(false)
  isVerified    Boolean   @default(false)
  photo         UserPhoto?
  @@map("user")  
}

model UserInvitation {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  email         String    @unique
  firstName     String
  lastName      String
  verifyCode    String    @db.Uuid
  isAdmin       Boolean   @default(false)

  @@map("user_invitations")  
}

model UserPhoto {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id])
  userId        Int       @unique
  contentType   String    @db.VarChar(64)
  updatedAt     DateTime  @updatedAt  

  @@map("user_photos")
}


model Organisation {
  id            Int       @id @default(autoincrement())
  name          String

  @@map("organisation")  
}

model Program {
  id            Int       @id @default(autoincrement())
  name          String
  about         String?    
  achievement   String?
  website       String?    
  batches       Batch[]
  templates     Template[]

  @@map("programs")
}

model Batch {
  id            Int       @id @default(autoincrement())
  name          String  
  startDate     DateTime 
  endDate       DateTime
  certificates  Certificate[]
//teams         Team[]
  program       Program @relation(fields: [programId], references: [id])
  programId     Int  

  @@map("batches")
}

model Certificate {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @db.Uuid
  firstName     String  
  lastName      String
  email         String
  batch         Batch @relation(fields: [batchId], references: [id])
  batchId       Int
  teamName      String?
//team          Team? @relation(fields: [teamId], references: [id])
//teamId        Int?
  template      Template @relation(fields: [templateId], references: [id])
  templateId    Int
  updatedAt     DateTime  @updatedAt
  notifiedAt    DateTime?
  mjResponse    Json?

  @@unique(name: "certId", [batchId, email])
  @@map("certificates")  
}

// model Team {
// id            Int       @id @default(autoincrement())
// name          String
// batch         Batch @relation(fields: [batchId], references: [id])
// batchId       Int  
// certificates  Certificate[]
// 
// @@map("teams")
// }

model Template {
  id            Int       @id @default(autoincrement())
  name          String
  layout        Json      
  locale        String    @default("de-DE")
  updatedAt     DateTime  @updatedAt    
  certificates  Certificate[]
  program       Program   @relation(fields: [programId], references: [id])  
  programId     Int

  @@map("templates")  
}

model Typeface {
  id            Int       @id @default(autoincrement())
  name          String    @unique @db.VarChar(64)
  weight        Int       @db.SmallInt
  style         String    @db.VarChar(32)

  @@map("typefaces")  
}

